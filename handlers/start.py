import vk_api
import requests
import json
import asyncio
import tempfile
import os
from aiogram import Bot, Router, F

from aiogram.filters import CommandStart
from aiogram.types import Message, CallbackQuery
from aiogram.client.default import DefaultBotProperties
from aiogram.enums import ParseMode
from aiogram.fsm.context import FSMContext

from telethon import TelegramClient, functions, errors


from config import TOKEN, GEMINI_API_KEY, hashtags, BOT_TOKEN

from core.functions import ProxyFromUrl
from core.lenta import Lenta_Parser
from core.states import States
from core.ria import get_latest_article
from Levenshtein import ratio

import core.kb as kb

bot = Bot(
    BOT_TOKEN,
    default=DefaultBotProperties(parse_mode=ParseMode.HTML)
)

CHANNELS_FILE = "channels.txt"
GROUP_FILE = "vk_group.txt"

tg_client = TelegramClient(
    "session/tg",
    proxy=ProxyFromUrl("http://zMVPkGG3bb:EBYiNK1WdL@107.175.69.226:52117"),
    api_id=2040,
    api_hash="b18441a1ff607e10a989891a5462e627",
    auto_reconnect=True,
    system_version="4.16.30-vxCUSTOM"
)

vk_session =  vk_api.VkApi(
    token=TOKEN, api_version='5.131', scope=1073737727)

vk_client = vk_session.get_api()

upload = vk_api.VkUpload(vk_session)

handlers_router = Router()


async def call_gemini_api(gemini_api_key, prompt):
    print("–ó–∞–ø—Ä–æ—Å –∫ –ò–ò...")
    url = "https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-flash-latest:generateContent"
    headers = {"Content-Type": "application/json"}
    data = {
        "contents": [
            {"parts": [{"text": prompt}]}
        ]
    }

    proxy = "http://zMVPkGG3bb:EBYiNK1WdL@107.175.69.226:52117"
    response = requests.post(url, headers=headers, data=json.dumps(data), params={
                             "key": gemini_api_key}, proxies={"http": proxy, "https": proxy})
    f = response.json()
    return f['candidates'][0]['content']['parts'][0]['text']



@handlers_router.message(CommandStart())
async def start(message: Message) -> None:
    await message.answer(f"–ü—Ä–∏–≤–µ—Ç {message.from_user.first_name}", reply_markup=kb.menu)

@handlers_router.callback_query(F.data == "add_vk_group")
async def add_vk_group(call: CallbackQuery, state: FSMContext):
    await call.message.edit_text("–í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –í–ö –≥—Ä—É–ø–ø—É, –≤ –∫–æ—Ç–æ—Ä—É—é –±–æ—Ç –¥–æ–ª–∂–µ–Ω –¥–µ–ª–∞—Ç—å –ø–æ—Å—Ç—ã.")
    await state.set_state(States.vk_group)

@handlers_router.message(States.vk_group)
async def save_vk_group(message: Message, state: FSMContext):
    with open(GROUP_FILE, "w") as f:
        f.write(message.text.strip())
    await message.answer("–°—Å—ã–ª–∫–∞ –Ω–∞ –í–ö –≥—Ä—É–ø–ø—É —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞.", reply_markup=kb.menu)
    await state.clear()

@handlers_router.callback_query(F.data == "add_channels")
async def add_channels(call: CallbackQuery, state: FSMContext):
    await call.message.edit_text("–í–≤–µ–¥–∏—Ç–µ —Å–ø–∏—Å–æ–∫ –¢–ì –∫–∞–Ω–∞–ª–æ–≤, –∑–∞ –∫–æ—Ç–æ—Ä—ã–º–∏ –Ω—É–∂–Ω–æ —Å–ª–µ–¥–∏—Ç—å, —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é.")
    await state.set_state(States.tg_channels)

@handlers_router.message(States.tg_channels)
async def save_channels(message: Message, state: FSMContext):
    with open(CHANNELS_FILE, "w") as f:
        f.write("\n".join(message.text.split(",")))
    await message.answer("–°–ø–∏—Å–æ–∫ –¢–ì –∫–∞–Ω–∞–ª–æ–≤ —Å–æ—Ö—Ä–∞–Ω—ë–Ω.", reply_markup=kb.menu)
    await state.clear()

@handlers_router.callback_query(F.data.startswith("start="))
async def start_callback(call: CallbackQuery) -> None:
    act = call.data.split("=")[1]
    if act == "settings":
        await call.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫—É:", reply_markup=kb.settings)
    else:
        with open(CHANNELS_FILE, "r") as f:
                urls = f.read().splitlines()

        with open(GROUP_FILE, "r") as f:
            group = f.read().strip()

        ids = {}
        ids['lenta'] = ['']
        ids['ria'] = ['']
        for url in urls:
            ids[url] = []
        
        while True:
            try:
                

                
                groupname = group.replace("https://vk.com/", "")

                group_id = vk_client.utils.resolveScreenName(screen_name=groupname)['object_id']
                
                
                for url in urls:
                    
                    
                    await call.message.answer(f"–ù–∞—á–∏–Ω–∞—é —Å–æ–±–∏—Ä–∞—Ç—å –¥–∞–Ω–Ω—ã–µ —Å —Ç–≥ —á–∞—Ç–∞ {url}...")
                    await tg_client.connect()

                    try:
                        full = await tg_client(functions.channels.GetFullChannelRequest(url))
                    except (errors.rpcerrorlist.ChannelPrivateError,
                            errors.rpcerrorlist.TimeoutError,
                            errors.rpcerrorlist.ChannelPublicGroupNaError):

                        return None, "–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —á–∞—Ç—É"
                    except (ValueError):

                        return None, "–ß–∞—Ç –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"

                    full_channel = full.full_chat
                    chat_id = full_channel.id
                    
                    async for msg in tg_client.iter_messages(chat_id, limit=1):
                        
                        if msg.id in ids[url]:
                            continue
                        
                        ids[url].append(msg.id)
                        
                        if msg.video:
                            ad_check_prompt = f"–û–ø—Ä–µ–¥–µ–ª–∏, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ—Ç —Ç–µ–∫—Å—Ç —Ä–µ–∫–ª–∞–º–Ω—ã–º. –û—Ç–≤–µ—Ç—å —Å—Ç—Ä–æ–≥–æ: '–†–µ–∫–ª–∞–º–∞ –µ—Å—Ç—å' –∏–ª–∏ '–†–µ–∫–ª–∞–º–∞ –Ω–µ—Ç'. –¢–µ–∫—Å—Ç: {
                                msg.text.replace('üì±[–î–º–∏—Ç—Ä–∏–π –ù–∏–∫–æ—Ç–∏–Ω. –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è!](https://t.me/+pJOV7FvOs4U0NTgy)', '')}"
                            ad_check_result = await call_gemini_api(GEMINI_API_KEY, ad_check_prompt)
                            if "–†–µ–∫–ª–∞–º–∞ –Ω–µ—Ç" in ad_check_result:
                                await tg_client.download_media(msg.video, "video.mp4")
                            
                                video = upload.video(
                                    video_file='video.mp4')
                                vk_video_url = 'https://vk.com/video{}_{}'.format(
                                    video['owner_id'], video['video_id'])
                                video = vk_video_url.replace('https://vk.com/', '')
                                # –ü–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫–∞ —Ç–µ–∫—Å—Ç–∞
                                rephrase_prompt = f"–ü–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä—É–π —Å–ª–µ–¥—É—é—â–∏–π —Ç–µ–∫—Å—Ç, —Å–æ—Ö—Ä–∞–Ω—è—è –µ–≥–æ —Å—É—Ç—å: {
                                    msg.text}"
                                rephrased_text = await call_gemini_api(GEMINI_API_KEY, rephrase_prompt)

                                vk_client.wall.post(
                                    owner_id=-group_id, from_group=1, message=rephrased_text+hashtags, attachments=video)
                                await call.message.answer("–ü–æ—Å—Ç —Å —Ç–≥ –±—ã–ª —Å–ø–∞—Ä—à–µ–Ω –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ –≥—Ä—É–ø–ø—É")
                            else:
                                await call.message.answer("–ü–æ—Å—Ç —Å —Ç–≥ –±—ã–ª —Å–ø–∞—Ä—à–µ–Ω, –Ω–æ –Ω–µ –±—ã–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ –≥—Ä—É–ø–ø—É, —Ç–∞–∫ –∫–∞–∫ –Ω–∞—à–µ–ª —Ä–µ–∫–ª–∞–º—É")
                            
                        elif msg.photo:
                            
                            await tg_client.download_media(msg.photo, "photo.jpg")

                            foto = upload.photo(
                                'photo.jpg', album_id="306470339")
                            vk_photo_url = 'https://vk.com/photo{}_{}'.format(
                                foto[0]['owner_id'], foto[0]['id'])
                            photo = vk_photo_url.replace('https://vk.com/', '')
                            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ä–µ–∫–ª–∞–º—É
                            ad_check_prompt = f"–û–ø—Ä–µ–¥–µ–ª–∏, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ—Ç —Ç–µ–∫—Å—Ç —Ä–µ–∫–ª–∞–º–Ω—ã–º. –û—Ç–≤–µ—Ç—å —Å—Ç—Ä–æ–≥–æ: '–†–µ–∫–ª–∞–º–∞ –µ—Å—Ç—å' –∏–ª–∏ '–†–µ–∫–ª–∞–º–∞ –Ω–µ—Ç'. –¢–µ–∫—Å—Ç: {
                                msg.text.replace('üì±[–î–º–∏—Ç—Ä–∏–π –ù–∏–∫–æ—Ç–∏–Ω. –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è!](https://t.me/+pJOV7FvOs4U0NTgy)', '')}"
                            ad_check_result = await call_gemini_api(GEMINI_API_KEY, ad_check_prompt)

                            if "–†–µ–∫–ª–∞–º–∞ –Ω–µ—Ç" in ad_check_result:
                                # –ü–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫–∞ —Ç–µ–∫—Å—Ç–∞
                                rephrase_prompt = f"–ü–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä—É–π —Å–ª–µ–¥—É—é—â–∏–π —Ç–µ–∫—Å—Ç, —Å–æ—Ö—Ä–∞–Ω—è—è –µ–≥–æ —Å—É—Ç—å: {
                                    msg.text}"
                                rephrased_text = await call_gemini_api(GEMINI_API_KEY, rephrase_prompt)

                                vk_client.wall.post(
                                    owner_id=-group_id, from_group=1, message=rephrased_text+hashtags, attachments=photo)
                                await call.message.answer("–ü–æ—Å—Ç —Å —Ç–≥ –±—ã–ª —Å–ø–∞—Ä—à–µ–Ω –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ –≥—Ä—É–ø–ø—É")
                            else:
                                await call.message.answer("–ü–æ—Å—Ç —Å —Ç–≥ –±—ã–ª —Å–ø–∞—Ä—à–µ–Ω, –Ω–æ –Ω–µ –±—ã–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ –≥—Ä—É–ø–ø—É, —Ç–∞–∫ –∫–∞–∫ –Ω–∞—à–µ–ª —Ä–µ–∫–ª–∞–º—É")
                        elif msg.text:
                            
                            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ä–µ–∫–ª–∞–º—É
                            ad_check_prompt = f"–û–ø—Ä–µ–¥–µ–ª–∏, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ—Ç —Ç–µ–∫—Å—Ç —Ä–µ–∫–ª–∞–º–Ω—ã–º. –û—Ç–≤–µ—Ç—å —Å—Ç—Ä–æ–≥–æ: '–†–µ–∫–ª–∞–º–∞ –µ—Å—Ç—å' –∏–ª–∏ '–†–µ–∫–ª–∞–º–∞ –Ω–µ—Ç'. –¢–µ–∫—Å—Ç: {
                                msg.text.replace('üì±[–î–º–∏—Ç—Ä–∏–π –ù–∏–∫–æ—Ç–∏–Ω. –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è!](https://t.me/+pJOV7FvOs4U0NTgy)', '')}"
                            ad_check_result = await call_gemini_api(GEMINI_API_KEY, ad_check_prompt)

                            if "–†–µ–∫–ª–∞–º–∞ –Ω–µ—Ç" in ad_check_result:
                                # –ü–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫–∞ —Ç–µ–∫—Å—Ç–∞
                                rephrase_prompt = f"–ü–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä—É–π —Å–ª–µ–¥—É—é—â–∏–π —Ç–µ–∫—Å—Ç, —Å–æ—Ö—Ä–∞–Ω—è—è –µ–≥–æ —Å—É—Ç—å: {
                                    msg.text}"
                                rephrased_text = await call_gemini_api(GEMINI_API_KEY, rephrase_prompt)

                                vk_client.wall.post(owner_id=-group_id,
                                                    from_group=1, message=rephrased_text+hashtags)
                                await call.message.answer("–ü–æ—Å—Ç —Å —Ç–≥ –±—ã–ª —Å–ø–∞—Ä—à–µ–Ω –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ –≥—Ä—É–ø–ø—É")
                            else:
                                await call.message.answer("–ü–æ—Å—Ç —Å —Ç–≥ –±—ã–ª —Å–ø–∞—Ä—à–µ–Ω, –Ω–æ –Ω–µ –±—ã–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ –≥—Ä—É–ø–ø—É, —Ç–∞–∫ –∫–∞–∫ –Ω–∞—à–µ–ª —Ä–µ–∫–ª–∞–º—É")
                    await tg_client.disconnect()
                
                lenta = Lenta_Parser()
                post = lenta.parse_latest_post()
                
                if post:
                    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –¥–ª—è –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–∏—è (–µ—Å–ª–∏ –º–µ–¥–∏–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç, –ø–µ—Ä–µ–¥–∞–¥–∏–º –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É)
                    photo = ""
                    # –ï—Å–ª–∏ –Ω–æ–≤–æ—Å—Ç—å –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è –æ—Ç –ø—Ä–µ–¥—ã–¥—É—â–µ–π (–ø–æ—Ä–æ–≥ —Å—Ö–æ–∂–µ—Å—Ç–∏ –º–æ–∂–Ω–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å)
                    if ratio(post["text"], ids['lenta'][-1]) < 0.5:
                        ids['lenta'].append(post["text"])
                        if post["media"]:
                            # –°–∫–∞—á–∏–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ URL –≤ —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
                            response = requests.get(post["media"])
                            if response.status_code == 200:
                                with tempfile.NamedTemporaryFile(delete=False, suffix=".jpg") as tmp_file:
                                    tmp_file.write(response.content)
                                    tmp_filename = tmp_file.name
                                # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–æ—Ç–æ –≤ –í–ö
                                media = upload.photo(tmp_filename, album_id="306470339")
                                os.remove(tmp_filename)  # —É–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏
                                vk_photo_url = 'https://vk.com/photo{}_{}'.format(
                                    media[0]['owner_id'], media[0]['id'])
                                photo = vk_photo_url.replace('https://vk.com/', '')
                            else:
                                # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å —Ñ–æ—Ç–æ, –º–æ–∂–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –æ—à–∏–±–∫—É –∏–ª–∏ –æ—Å—Ç–∞–≤–∏—Ç—å photo –ø—É—Å—Ç—ã–º
                                photo = ""
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ç–µ–∫—Å—Ç —Ä–µ–∫–ª–∞–º–Ω—ã–º
                        ad_check_prompt = (
                            f"–û–ø—Ä–µ–¥–µ–ª–∏, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ—Ç —Ç–µ–∫—Å—Ç —Ä–µ–∫–ª–∞–º–Ω—ã–º. "
                            f"–û—Ç–≤–µ—Ç—å —Å—Ç—Ä–æ–≥–æ: '–†–µ–∫–ª–∞–º–∞ –µ—Å—Ç—å' –∏–ª–∏ '–†–µ–∫–ª–∞–º–∞ –Ω–µ—Ç'. –¢–µ–∫—Å—Ç: {post['text']}"
                        )
                        ad_check_result = await call_gemini_api(GEMINI_API_KEY, ad_check_prompt)

                        if "–†–µ–∫–ª–∞–º–∞ –Ω–µ—Ç" in ad_check_result:
                            # –ü–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫–∞ —Ç–µ–∫—Å—Ç–∞
                            rephrase_prompt = f"–ü–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä—É–π —Å–ª–µ–¥—É—é—â–∏–π —Ç–µ–∫—Å—Ç, —Å–æ—Ö—Ä–∞–Ω—è—è –µ–≥–æ —Å—É—Ç—å: {post['text']}"
                            rephrased_text = await call_gemini_api(GEMINI_API_KEY, rephrase_prompt)
                            vk_client.wall.post(
                                owner_id=-group_id,
                                from_group=1,
                                message=rephrased_text + f"\n\n–ò—Å—Ç–æ—á–Ω–∏–∫: {post['url']}" + hashtags,
                                attachments=photo  # –ï—Å–ª–∏ photo –ø—É—Å—Ç–æ–µ, –º–æ–∂–Ω–æ –ø–µ—Ä–µ–¥–∞–≤–∞—Ç—å None –∏–ª–∏ –≤–æ–≤—Å–µ –Ω–µ —É–∫–∞–∑—ã–≤–∞—Ç—å attachments
                            )
                            await call.message.answer("–ü–æ—Å—Ç —Å –ª–µ–Ω—Ç—ã —Ä—É –±—ã–ª —Å–ø–∞—Ä—à–µ–Ω –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ –≥—Ä—É–ø–ø—É")
                            
                
                latest_article = get_latest_article('https://ria.ru/lenta/')
                if latest_article:
                    if ratio(latest_article["text"], ids['ria'][-1]) < 0.5:
                        ids["ria"].append(latest_article["text"])
                        if latest_article["media"]:
                            media = upload.photo(
                                latest_article["media"], album_id="306470339")
                            vk_photo_url = 'https://vk.com/photo{}_{}'.format(
                                media[0]['owner_id'], media[0]['id'])
                            photo = vk_photo_url.replace('https://vk.com/', '')
                            
                        ad_check_prompt = f"–û–ø—Ä–µ–¥–µ–ª–∏, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ—Ç —Ç–µ–∫—Å—Ç —Ä–µ–∫–ª–∞–º–Ω—ã–º. –û—Ç–≤–µ—Ç—å —Å—Ç—Ä–æ–≥–æ: '–†–µ–∫–ª–∞–º–∞ –µ—Å—Ç—å' –∏–ª–∏ '–†–µ–∫–ª–∞–º–∞ –Ω–µ—Ç'. –¢–µ–∫—Å—Ç: {latest_article["text"]}"
                        ad_check_result = await call_gemini_api(GEMINI_API_KEY, ad_check_prompt)

                        if "–†–µ–∫–ª–∞–º–∞ –Ω–µ—Ç" in ad_check_result:

                            rephrase_prompt = f"–ü–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä—É–π —Å–ª–µ–¥—É—é—â–∏–π —Ç–µ–∫—Å—Ç, —Å–æ—Ö—Ä–∞–Ω—è—è –µ–≥–æ —Å—É—Ç—å: {latest_article["text"]}"
                            rephrased_text = await call_gemini_api(GEMINI_API_KEY, rephrase_prompt)
                            vk_client.wall.post(owner_id=-group_id,from_group=1, message=rephrased_text+f"\n\n–ò—Å—Ç–æ—á–Ω–∏–∫: {latest_article['url']}"+hashtags, attachments=photo)
                            await call.message.answer("–ü–æ—Å—Ç —Å —Ä–∏–∞ —Ä—É –±—ã–ª —Å–ø–∞—Ä—à–µ–Ω –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ –≥—Ä—É–ø–ø—É")
                
                await asyncio.sleep(60)
            except Exception as e:
                print(e)
        